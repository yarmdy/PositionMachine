//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZEHOU.PM.DB.dbLabelInfo
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dbLabelInfoEntities : DbContext
    {
        public dbLabelInfoEntities()
            : base("name=dbLabelInfoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<APP> APPs { get; set; }
        public virtual DbSet<App_Config> App_Config { get; set; }
        public virtual DbSet<BarcodeRecord> BarcodeRecords { get; set; }
        public virtual DbSet<Class> Classes { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<DIS_Config> DIS_Config { get; set; }
        public virtual DbSet<DIS_Log> DIS_Log { get; set; }
        public virtual DbSet<DR> DRs { get; set; }
        public virtual DbSet<Equipment_Config> Equipment_Config { get; set; }
        public virtual DbSet<GroupReportTime> GroupReportTimes { get; set; }
        public virtual DbSet<HOBTSS_Request> HOBTSS_Request { get; set; }
        public virtual DbSet<Label> Labels { get; set; }
        public virtual DbSet<Log_Label> Log_Label { get; set; }
        public virtual DbSet<Log_LabelConfirm> Log_LabelConfirm { get; set; }
        public virtual DbSet<LR> LRs { get; set; }
        public virtual DbSet<Manager_Data> Manager_Data { get; set; }
        public virtual DbSet<OperateRequest> OperateRequests { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<PatientID_Queue_Table> PatientID_Queue_Table { get; set; }
        public virtual DbSet<Post> Posts { get; set; }
        public virtual DbSet<PrintTemplate> PrintTemplates { get; set; }
        public virtual DbSet<PrintTemplateTable> PrintTemplateTables { get; set; }
        public virtual DbSet<PRIORITY_RULE_TABEL> PRIORITY_RULE_TABEL { get; set; }
        public virtual DbSet<PriorityRuleTable> PriorityRuleTables { get; set; }
        public virtual DbSet<QUEUE_RECORD_TABLE> QUEUE_RECORD_TABLE { get; set; }
        public virtual DbSet<QUEUE_TABLE> QUEUE_TABLE { get; set; }
        public virtual DbSet<QueueSet> QueueSets { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<ShutDownCmd> ShutDownCmds { get; set; }
        public virtual DbSet<Sorting_History> Sorting_History { get; set; }
        public virtual DbSet<Sorting_TubeGroup_J> Sorting_TubeGroup_J { get; set; }
        public virtual DbSet<Sorting_TubeInfo_M> Sorting_TubeInfo_M { get; set; }
        public virtual DbSet<Sorting_TubeItem_J> Sorting_TubeItem_J { get; set; }
        public virtual DbSet<SortRecord> SortRecords { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<SystemParameter> SystemParameters { get; set; }
        public virtual DbSet<TubeType> TubeTypes { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<CallNumberRequest> CallNumberRequests { get; set; }
        public virtual DbSet<Log_Labeling> Log_Labeling { get; set; }
        public virtual DbSet<PatientIDTable> PatientIDTables { get; set; }
        public virtual DbSet<Sorting_TubeInfo_History> Sorting_TubeInfo_History { get; set; }
        public virtual DbSet<TEST_TIME_TABEL> TEST_TIME_TABEL { get; set; }
        public virtual DbSet<TipsValueTable> TipsValueTables { get; set; }
        public virtual DbSet<V_GuiLin_Sorting> V_GuiLin_Sorting { get; set; }
        public virtual DbSet<V_Sorting_TubeGroup> V_Sorting_TubeGroup { get; set; }
        public virtual DbSet<V_Sorting_TubeInfo_History> V_Sorting_TubeInfo_History { get; set; }
        public virtual DbSet<V_SortingInfo> V_SortingInfo { get; set; }
        public virtual DbSet<V_ThreeDays_Sorting_TubeInfo> V_ThreeDays_Sorting_TubeInfo { get; set; }
        public virtual DbSet<V_ToDay_Sorting_History> V_ToDay_Sorting_History { get; set; }
        public virtual DbSet<V_ToDay_Sorting_TubeInfo> V_ToDay_Sorting_TubeInfo { get; set; }
        public virtual DbSet<NAP_ParentPoints> NAP_ParentPoints { get; set; }
        public virtual DbSet<NAP_People> NAP_People { get; set; }
        public virtual DbSet<NAP_PickPoints> NAP_PickPoints { get; set; }
        public virtual DbSet<NAP_PickRecords> NAP_PickRecords { get; set; }
        public virtual DbSet<NAP_PointTypes> NAP_PointTypes { get; set; }
        public virtual DbSet<NAP_Tubes> NAP_Tubes { get; set; }
        public virtual DbSet<NAP_UserPickPoints> NAP_UserPickPoints { get; set; }
    
        public virtual ObjectResult<aaaa_Result> aaaa(Nullable<int> a, string b, Nullable<int> c, Nullable<int> d)
        {
            var aParameter = a.HasValue ?
                new ObjectParameter("A", a) :
                new ObjectParameter("A", typeof(int));
    
            var bParameter = b != null ?
                new ObjectParameter("B", b) :
                new ObjectParameter("B", typeof(string));
    
            var cParameter = c.HasValue ?
                new ObjectParameter("C", c) :
                new ObjectParameter("C", typeof(int));
    
            var dParameter = d.HasValue ?
                new ObjectParameter("D", d) :
                new ObjectParameter("D", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aaaa_Result>("aaaa", aParameter, bParameter, cParameter, dParameter);
        }
    
        public virtual ObjectResult<string> GetBarCode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetBarCode");
        }
    
        public virtual ObjectResult<PaiDui_Result> PaiDui(string patientID, string iD_Card_No, string patientName, Nullable<int> priority)
        {
            var patientIDParameter = patientID != null ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(string));
    
            var iD_Card_NoParameter = iD_Card_No != null ?
                new ObjectParameter("ID_Card_No", iD_Card_No) :
                new ObjectParameter("ID_Card_No", typeof(string));
    
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PaiDui_Result>("PaiDui", patientIDParameter, iD_Card_NoParameter, patientNameParameter, priorityParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ins_Sorting(string bARCODE, string tESTITEM, string tESTGROUP, string pATIENTID, string pATIENTNAME, string pATIENTSEX, string pATIENTAGE, string pATIENTTYPE, string dATASOURCE, Nullable<int> sORTINGSTATE, Nullable<int> signForState, string rESERVE1, string rESERVE2, string rESERVE3, string rESERVE4, string rESERVE5, string rESERVE6, string rESERVE7, string rESERVE8, string rESERVE9, string rESERVE10, string rESERVE11, string rESERVE12, string rESERVE13, string rESERVE14, string rESERVE15)
        {
            var bARCODEParameter = bARCODE != null ?
                new ObjectParameter("BARCODE", bARCODE) :
                new ObjectParameter("BARCODE", typeof(string));
    
            var tESTITEMParameter = tESTITEM != null ?
                new ObjectParameter("TESTITEM", tESTITEM) :
                new ObjectParameter("TESTITEM", typeof(string));
    
            var tESTGROUPParameter = tESTGROUP != null ?
                new ObjectParameter("TESTGROUP", tESTGROUP) :
                new ObjectParameter("TESTGROUP", typeof(string));
    
            var pATIENTIDParameter = pATIENTID != null ?
                new ObjectParameter("PATIENTID", pATIENTID) :
                new ObjectParameter("PATIENTID", typeof(string));
    
            var pATIENTNAMEParameter = pATIENTNAME != null ?
                new ObjectParameter("PATIENTNAME", pATIENTNAME) :
                new ObjectParameter("PATIENTNAME", typeof(string));
    
            var pATIENTSEXParameter = pATIENTSEX != null ?
                new ObjectParameter("PATIENTSEX", pATIENTSEX) :
                new ObjectParameter("PATIENTSEX", typeof(string));
    
            var pATIENTAGEParameter = pATIENTAGE != null ?
                new ObjectParameter("PATIENTAGE", pATIENTAGE) :
                new ObjectParameter("PATIENTAGE", typeof(string));
    
            var pATIENTTYPEParameter = pATIENTTYPE != null ?
                new ObjectParameter("PATIENTTYPE", pATIENTTYPE) :
                new ObjectParameter("PATIENTTYPE", typeof(string));
    
            var dATASOURCEParameter = dATASOURCE != null ?
                new ObjectParameter("DATASOURCE", dATASOURCE) :
                new ObjectParameter("DATASOURCE", typeof(string));
    
            var sORTINGSTATEParameter = sORTINGSTATE.HasValue ?
                new ObjectParameter("SORTINGSTATE", sORTINGSTATE) :
                new ObjectParameter("SORTINGSTATE", typeof(int));
    
            var signForStateParameter = signForState.HasValue ?
                new ObjectParameter("SignForState", signForState) :
                new ObjectParameter("SignForState", typeof(int));
    
            var rESERVE1Parameter = rESERVE1 != null ?
                new ObjectParameter("RESERVE1", rESERVE1) :
                new ObjectParameter("RESERVE1", typeof(string));
    
            var rESERVE2Parameter = rESERVE2 != null ?
                new ObjectParameter("RESERVE2", rESERVE2) :
                new ObjectParameter("RESERVE2", typeof(string));
    
            var rESERVE3Parameter = rESERVE3 != null ?
                new ObjectParameter("RESERVE3", rESERVE3) :
                new ObjectParameter("RESERVE3", typeof(string));
    
            var rESERVE4Parameter = rESERVE4 != null ?
                new ObjectParameter("RESERVE4", rESERVE4) :
                new ObjectParameter("RESERVE4", typeof(string));
    
            var rESERVE5Parameter = rESERVE5 != null ?
                new ObjectParameter("RESERVE5", rESERVE5) :
                new ObjectParameter("RESERVE5", typeof(string));
    
            var rESERVE6Parameter = rESERVE6 != null ?
                new ObjectParameter("RESERVE6", rESERVE6) :
                new ObjectParameter("RESERVE6", typeof(string));
    
            var rESERVE7Parameter = rESERVE7 != null ?
                new ObjectParameter("RESERVE7", rESERVE7) :
                new ObjectParameter("RESERVE7", typeof(string));
    
            var rESERVE8Parameter = rESERVE8 != null ?
                new ObjectParameter("RESERVE8", rESERVE8) :
                new ObjectParameter("RESERVE8", typeof(string));
    
            var rESERVE9Parameter = rESERVE9 != null ?
                new ObjectParameter("RESERVE9", rESERVE9) :
                new ObjectParameter("RESERVE9", typeof(string));
    
            var rESERVE10Parameter = rESERVE10 != null ?
                new ObjectParameter("RESERVE10", rESERVE10) :
                new ObjectParameter("RESERVE10", typeof(string));
    
            var rESERVE11Parameter = rESERVE11 != null ?
                new ObjectParameter("RESERVE11", rESERVE11) :
                new ObjectParameter("RESERVE11", typeof(string));
    
            var rESERVE12Parameter = rESERVE12 != null ?
                new ObjectParameter("RESERVE12", rESERVE12) :
                new ObjectParameter("RESERVE12", typeof(string));
    
            var rESERVE13Parameter = rESERVE13 != null ?
                new ObjectParameter("RESERVE13", rESERVE13) :
                new ObjectParameter("RESERVE13", typeof(string));
    
            var rESERVE14Parameter = rESERVE14 != null ?
                new ObjectParameter("RESERVE14", rESERVE14) :
                new ObjectParameter("RESERVE14", typeof(string));
    
            var rESERVE15Parameter = rESERVE15 != null ?
                new ObjectParameter("RESERVE15", rESERVE15) :
                new ObjectParameter("RESERVE15", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ins_Sorting", bARCODEParameter, tESTITEMParameter, tESTGROUPParameter, pATIENTIDParameter, pATIENTNAMEParameter, pATIENTSEXParameter, pATIENTAGEParameter, pATIENTTYPEParameter, dATASOURCEParameter, sORTINGSTATEParameter, signForStateParameter, rESERVE1Parameter, rESERVE2Parameter, rESERVE3Parameter, rESERVE4Parameter, rESERVE5Parameter, rESERVE6Parameter, rESERVE7Parameter, rESERVE8Parameter, rESERVE9Parameter, rESERVE10Parameter, rESERVE11Parameter, rESERVE12Parameter, rESERVE13Parameter, rESERVE14Parameter, rESERVE15Parameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ins_Sorting_J(string bARCODE, string tESTITEM, string tESTGROUP, string pATIENTID, string pATIENTNAME, string pATIENTSEX, string pATIENTAGE, string pATIENTTYPE, string dATASOURCE, Nullable<int> sORTINGSTATE, Nullable<int> signForState, string rESERVE1, string rESERVE2, string rESERVE3, string rESERVE4, string rESERVE5, string rESERVE6, string rESERVE7, string rESERVE8, string rESERVE9, string rESERVE10, string rESERVE11, string rESERVE12, string rESERVE13, string rESERVE14, string rESERVE15)
        {
            var bARCODEParameter = bARCODE != null ?
                new ObjectParameter("BARCODE", bARCODE) :
                new ObjectParameter("BARCODE", typeof(string));
    
            var tESTITEMParameter = tESTITEM != null ?
                new ObjectParameter("TESTITEM", tESTITEM) :
                new ObjectParameter("TESTITEM", typeof(string));
    
            var tESTGROUPParameter = tESTGROUP != null ?
                new ObjectParameter("TESTGROUP", tESTGROUP) :
                new ObjectParameter("TESTGROUP", typeof(string));
    
            var pATIENTIDParameter = pATIENTID != null ?
                new ObjectParameter("PATIENTID", pATIENTID) :
                new ObjectParameter("PATIENTID", typeof(string));
    
            var pATIENTNAMEParameter = pATIENTNAME != null ?
                new ObjectParameter("PATIENTNAME", pATIENTNAME) :
                new ObjectParameter("PATIENTNAME", typeof(string));
    
            var pATIENTSEXParameter = pATIENTSEX != null ?
                new ObjectParameter("PATIENTSEX", pATIENTSEX) :
                new ObjectParameter("PATIENTSEX", typeof(string));
    
            var pATIENTAGEParameter = pATIENTAGE != null ?
                new ObjectParameter("PATIENTAGE", pATIENTAGE) :
                new ObjectParameter("PATIENTAGE", typeof(string));
    
            var pATIENTTYPEParameter = pATIENTTYPE != null ?
                new ObjectParameter("PATIENTTYPE", pATIENTTYPE) :
                new ObjectParameter("PATIENTTYPE", typeof(string));
    
            var dATASOURCEParameter = dATASOURCE != null ?
                new ObjectParameter("DATASOURCE", dATASOURCE) :
                new ObjectParameter("DATASOURCE", typeof(string));
    
            var sORTINGSTATEParameter = sORTINGSTATE.HasValue ?
                new ObjectParameter("SORTINGSTATE", sORTINGSTATE) :
                new ObjectParameter("SORTINGSTATE", typeof(int));
    
            var signForStateParameter = signForState.HasValue ?
                new ObjectParameter("SignForState", signForState) :
                new ObjectParameter("SignForState", typeof(int));
    
            var rESERVE1Parameter = rESERVE1 != null ?
                new ObjectParameter("RESERVE1", rESERVE1) :
                new ObjectParameter("RESERVE1", typeof(string));
    
            var rESERVE2Parameter = rESERVE2 != null ?
                new ObjectParameter("RESERVE2", rESERVE2) :
                new ObjectParameter("RESERVE2", typeof(string));
    
            var rESERVE3Parameter = rESERVE3 != null ?
                new ObjectParameter("RESERVE3", rESERVE3) :
                new ObjectParameter("RESERVE3", typeof(string));
    
            var rESERVE4Parameter = rESERVE4 != null ?
                new ObjectParameter("RESERVE4", rESERVE4) :
                new ObjectParameter("RESERVE4", typeof(string));
    
            var rESERVE5Parameter = rESERVE5 != null ?
                new ObjectParameter("RESERVE5", rESERVE5) :
                new ObjectParameter("RESERVE5", typeof(string));
    
            var rESERVE6Parameter = rESERVE6 != null ?
                new ObjectParameter("RESERVE6", rESERVE6) :
                new ObjectParameter("RESERVE6", typeof(string));
    
            var rESERVE7Parameter = rESERVE7 != null ?
                new ObjectParameter("RESERVE7", rESERVE7) :
                new ObjectParameter("RESERVE7", typeof(string));
    
            var rESERVE8Parameter = rESERVE8 != null ?
                new ObjectParameter("RESERVE8", rESERVE8) :
                new ObjectParameter("RESERVE8", typeof(string));
    
            var rESERVE9Parameter = rESERVE9 != null ?
                new ObjectParameter("RESERVE9", rESERVE9) :
                new ObjectParameter("RESERVE9", typeof(string));
    
            var rESERVE10Parameter = rESERVE10 != null ?
                new ObjectParameter("RESERVE10", rESERVE10) :
                new ObjectParameter("RESERVE10", typeof(string));
    
            var rESERVE11Parameter = rESERVE11 != null ?
                new ObjectParameter("RESERVE11", rESERVE11) :
                new ObjectParameter("RESERVE11", typeof(string));
    
            var rESERVE12Parameter = rESERVE12 != null ?
                new ObjectParameter("RESERVE12", rESERVE12) :
                new ObjectParameter("RESERVE12", typeof(string));
    
            var rESERVE13Parameter = rESERVE13 != null ?
                new ObjectParameter("RESERVE13", rESERVE13) :
                new ObjectParameter("RESERVE13", typeof(string));
    
            var rESERVE14Parameter = rESERVE14 != null ?
                new ObjectParameter("RESERVE14", rESERVE14) :
                new ObjectParameter("RESERVE14", typeof(string));
    
            var rESERVE15Parameter = rESERVE15 != null ?
                new ObjectParameter("RESERVE15", rESERVE15) :
                new ObjectParameter("RESERVE15", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ins_Sorting_J", bARCODEParameter, tESTITEMParameter, tESTGROUPParameter, pATIENTIDParameter, pATIENTNAMEParameter, pATIENTSEXParameter, pATIENTAGEParameter, pATIENTTYPEParameter, dATASOURCEParameter, sORTINGSTATEParameter, signForStateParameter, rESERVE1Parameter, rESERVE2Parameter, rESERVE3Parameter, rESERVE4Parameter, rESERVE5Parameter, rESERVE6Parameter, rESERVE7Parameter, rESERVE8Parameter, rESERVE9Parameter, rESERVE10Parameter, rESERVE11Parameter, rESERVE12Parameter, rESERVE13Parameter, rESERVE14Parameter, rESERVE15Parameter);
        }
    
        public virtual ObjectResult<Nullable<int>> test(Nullable<int> inNum, ObjectParameter t)
        {
            var inNumParameter = inNum.HasValue ?
                new ObjectParameter("inNum", inNum) :
                new ObjectParameter("inNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("test", inNumParameter, t);
        }
    
        public virtual ObjectResult<TestQueue_Result> TestQueue(string patientID, string iD_Card_No, string patientName, Nullable<int> priority)
        {
            var patientIDParameter = patientID != null ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(string));
    
            var iD_Card_NoParameter = iD_Card_No != null ?
                new ObjectParameter("ID_Card_No", iD_Card_No) :
                new ObjectParameter("ID_Card_No", typeof(string));
    
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TestQueue_Result>("TestQueue", patientIDParameter, iD_Card_NoParameter, patientNameParameter, priorityParameter);
        }
    }
}
